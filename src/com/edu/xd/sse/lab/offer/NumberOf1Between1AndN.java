package com.edu.xd.sse.lab.offer;

/**
 * @author zhiyong wang
 * 题目：整数中1出现的次数（从1到n整数中1出现的次数）
 * 题目描述：求出1~13的整数中1出现的次数,并算出100~1300的整数中1出现的次数？
 * 为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。
 * ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数。
 */
public class NumberOf1Between1AndN {

	/**
	 *  我们用一个稍微大一点的数字21345作为例子来分析。我们把从1到21345的所有数字分成两段即1-1345和1346-21345（分段好处在于便于进行递归运算，因为1345位21345去掉最高位的结果）。
	 *
 	 *       先来看1346-21345中1出现的次数。1的出现分为两种情况：
	 *
	 *一种情况是1出现在最高位（万位）。从1到21345的数字中，1出现在 10000-19999这10000个数字的万位中，一共出现了10000（10^4）次；
	 *
	 *另外一种情况是1出现在除了最高位之外的其他位中。例子中 1346-21345，这20000个数字中后面四位中1出现的次数是2000次（2*10^3，
	 *其中2的第一位的数值，10^3是因为数字的后四位数字 其中一位为1，其余的三位数字可以在0到9这10个数字任意选择，由排列组合可以得出总次数是2*10^3）。
	 *（渔童注：这一段分析有点小问题，这20000个数字中后面四位中1出现的次数应该是8000次，2*4*10^3，其中2是第一位的数值，4是后面四位的位数长度，10^3是因为数字的后四位数字 其中一位为1，其余的三位数字可以在0到9这10个数字任意选择，
	 * 由排列组合可以得出总次数是2*4*10^3，下面的代码实现，原作者写的是正确的）
	 *
	 *
 	 *       至于从1到1345的所有数字中1出现的次数，我们就可以用递归地求得了。这也是我们为什么要把1-21345分为1-1345和1346-21345两段的原因。因为把21345的最高位去掉就得到1345，便于我们采用递归的思路。
	 *
  	 *      分析到这里还有一种特殊情况需要注意：前面我们举例子是最高位是一个比1大的数字，此时最高位1出现的次数10^4（对五位数而言）。但如果最高位是1 呢？比如输入12345，从10000到12345这些数字中，1在万位出现的次数就不是10^4次，而是2346次了，也就是除去最高位数字之后剩下的 数字再加上1。
	 * @param n
	 * @return
	 */
	public static int numberOf1Between1AndN(int n){
		if(n == 0)
			return 0;
		if(n < 10)
			return 1;
		int length = String.valueOf(n).toString().length() - 1;
		int firstCount = 0;
		int otherCount = 0;
		int first = n / (int)Math.pow(10, length);	//第一位数字	
		if(first > 1)
			firstCount = (int) Math.pow(10, length);//大于1的情况，出现在最高位中1的个数
		else if(first == 1)
			firstCount = n % (int) Math.pow(10, length) + 1;//等于1的情况，出现在最高位中1的个数
		otherCount = first * length * (int) Math.pow(10, length - 1);//最高位之外的剩下的位出现1的个数
		return firstCount + otherCount + numberOf1Between1AndN(n % (int) Math.pow(10, length));
	}
}
